/*
 * Copyright 2013 Anton Karmanov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Main unit. Contains program entry point and controls levels.
// -------------------------------------------------------------------------------------------------

//
// Constants
//

// Map consists of blocks. Each block consists of cells. The purpose of grouping cells into blocks
// is that in a randomly generated map, walls exist only on block boundaries.

const MAP_WIDTH = 10;                                  // Width of the map in blocks.
const MAP_HEIGHT = 8;                                  // Height of the map in blocks.
const MAP_BLOCK_WIDTH = 5;                             // Width of a block in cells.
const MAP_BLOCK_HEIGHT = 5;                            // Height of a block in cells.

const MIN_SNAKE_LEN = 3;                               // Minimum snake length in cells.
const MAX_SNAKE_LEN = 3000;                            // Maximum snake length in cells.
const SNAKE_SPEED_CELL_PER_S = 6;                      // Snake speed, cells per second.
const MAX_FRAMES_PER_S = 100;                          // Maximum rendering rate, frames per second.
const MAX_FOOD = 10;                                   // Maximum food weight.
const FOOD_LENGTH = 2.0;                               // Length that is added to a snake for each eaten unit of a food.

const AUTOSAVE_FILE_NAME = "SnakeAutoSave.txt";

const WORLD_WIDTH = MAP_WIDTH * MAP_BLOCK_WIDTH + 1;
const WORLD_HEIGHT = MAP_HEIGHT * MAP_BLOCK_HEIGHT + 1;

const MOVE_DELAY_MS = (int)(1000 / SNAKE_SPEED_CELL_PER_S);

//
// Main class.
//

class Snake {
    var view;
    var levelNo;

    // Starts the game.
    function Snake() {
        levelNo = 1;
        
        view = new View();
        
        var levelMap = loadLevel();
        if (levelMap == null) levelMap = createLevel();
        
        // Play levels one by one.
        for (;;) {
            playLevel(levelMap);
            ++levelNo;
            levelMap = createLevel();
        }
    }
    
    function createLevel() {
        var map = generateLevelMap(MAP_WIDTH, MAP_HEIGHT, MAP_BLOCK_WIDTH, MAP_BLOCK_HEIGHT, levelNo);
        
        // Save the generated level, so it can be restored after exiting the game.
        saveLevel(map);
        
        return map;
    }
    
    function playLevel(levelMap) {
        var world = createWorldForLevel(levelMap);
        waitForKeyWithMessage("Level " + levelNo, 100, "Press any key to start");
        
        // Play the world until the user successfully passes the level.
        while (!playWorld(world)) world = createWorldForLevel(levelMap);
        
        // A little delay before exiting the level.
        Thread.sleep(500);
    }
    
    function createWorldForLevel(levelMap) {
        var world = new World(levelNo, levelMap);
        view.paintNewWorld(world);
        return world;
    }

    function playWorld(world) {
        while (!world.gameOver && !world.levelFinished) {
            if (!checkControls(world)) return false;
            world.move();
            view.animateMove(world, MOVE_DELAY_MS);
        }

        if (world.gameOver) waitForKeyWithMessage("Fail", 120, "Press any key to try again");
        return !world.gameOver;
    }
    
    // Returns false if the user has asked to restart the current level.
    function checkControls(world) {
        // Process all keys currently present in the view's keyboard buffer.
        var key = view.readKey();
        while (key != -1) {
            var dir = keyToDirection(key);
            if (dir != null && world.setDirection(dir)) break;
            
            if (key == KeyEvent.VK_SPACE) {
                waitForKeyWithMessage("Pause", 120, "Press any key to continue");
                break;
            } else if (key == KeyEvent.VK_ESCAPE) {
                if (askRestart()) return false;
            }
            
            key = view.readKey();
        }
        
        return true;
    }

    // Ask the user if he/she wants to restart the current level.
    function askRestart() {
        return KeyEvent.VK_ENTER == waitForKeyWithMessage("Restart?", 100, "Press ENTER to restart the level");
    }

    // Show a message and wait for a key.
    function waitForKeyWithMessage(message1, size1, message2) {
        view.showMessage(message1, size1, message2);
        var key = view.waitKey();
        view.hideMessage();
        return key;
    }

    // Convert keyboard key code to a snake direction.
    function keyToDirection(key) {
        if (KeyEvent.VK_UP == key) {
            return World.DIR_UP;
        } else if (KeyEvent.VK_DOWN == key) {
            return  World.DIR_DOWN;
        } else if (KeyEvent.VK_LEFT == key) {
            return  World.DIR_LEFT;
        } else if (KeyEvent.VK_RIGHT == key) {
            return World.DIR_RIGHT;
        }
        return null;
    }

    // Loads a level information from the autosave file.
    function loadLevel() {
        try {
            var in0 = new java.io.FileInputStream(AUTOSAVE_FILE_NAME);
            try {
                var in = new java.io.BufferedReader(new java.io.InputStreamReader(in0));
                
                // Read the level number.
                var no = Integer.parseInt(in.readLine());
                
                // Read the snake start position.
                var startPos = in.readLine().split(" ");
                var startx = Integer.parseInt(startPos[0]);
                var starty = Integer.parseInt(startPos[1]);
                var startdx = Integer.parseInt(startPos[2]);
                var startdy = Integer.parseInt(startPos[3]);
                
                // Read the map of the level.
                var wallMatrix = readMap(in);
                
                levelNo = no;
                
                return new LevelMap(wallMatrix, new java.awt.Point(startx, starty), new java.awt.Point(startdx, startdy));
            } finally {
                in0.close();
            }
        } catch (e) {
            // ignore.
        }
        
        return null;
    }
    
    // Reads a level map from an input stream.
    function readMap(in) {
        var map = new [WORLD_HEIGHT][WORLD_WIDTH];
        
        for (var y = 0; y < WORLD_HEIGHT; ++y) {
            var line = in.readLine();
            for (var x = 0; x < WORLD_WIDTH; ++x) {
                var c = line.substring(x, x + 1);
                map[y][x] = "X".equals(c);
            }
        }
        
        return map;
    }

    // Saves the current level information to the auto-save file.
    function saveLevel(levelMap) {
        try {
            var out = new java.io.PrintStream(AUTOSAVE_FILE_NAME);
            try {
                out.println(levelNo);
                out.println(levelMap.startLocation.x + " " + levelMap.startLocation.y + " "
                        + levelMap.startDirection.x + " " + levelMap.startDirection.y);
                writeMap(out, levelMap);
            } finally {
                out.close();
            }
        } catch (e) {
            // ignore.
        }
    }
    
    // Writes a level map into an output stream.
    function writeMap(out, levelMap) {
        for (var y = 0; y < WORLD_HEIGHT; ++y) {
            var bld = new StringBuilder();
            for (var x = 0; x < WORLD_WIDTH; ++x) {
                bld.append(levelMap.wallMatrix[y][x] ? "X" : "_");
            }
            out.println(bld);
        }
    }
}

// Start the game.
new Snake();

// Exit.
System.exit(1);
