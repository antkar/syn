/*
 * Copyright 2013 Anton Karmanov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// View. Responsible for interaction with the user.
// -------------------------------------------------------------------------------------------------

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.swing.*;

// View class. Incapsulates a view.
//
// Uses java.awt.image.BufferStrategy to render the game world. The world is painted in an off-screen
// java.awt.image.BufferedImage which is then flushed to the BufferStrategy and becomes visible.
//
// The world is rendered from scratch only initially, and then, for every frame, only small areas
// are updated.
class View {
    // Interval in milliseconds for automatic repaint of the window.
    public const AUTO_REPAINT_INTERVAL_MS = 250;
    
    public const COLOR_NONE = Color.BLACK;
    public const COLOR_GRID = Color.DARK_GRAY;
    public const COLOR_WALL = Color.YELLOW.darker();
    public const COLOR_SNAKE = Color.GREEN;
    
    var keyboard = View_Keyboard();
    var window = View_Window(windowBufferPainted);
    var fieldView = View_Field(window);
    var snakeView = View_Snake(fieldView);
    var foodView = View_Food(fieldView);
    var messagesView = View_Messages();

    // Constructor.
    function View(){}
    
    function windowBufferPainted(g) = messagesView.draw(g, window.getImageSize());
    
    // Reads a key from the keyboard buffer. Returns -1 if the buffer is empty.
    public function readKey() = keyboard.readKey();
    
    // Waits for a key and returns its code.
    public function waitKey() = keyboard.waitKey();
    
    // Pains a new world from scratch.
    public function paintNewWorld(world) = window.sync({
        window.withImageGraphics(g -> drawWorld(g, world));
        window.repaintBuffer();
    });
    
    public function showMessage(message1, size1, message2) = window.sync({
        messagesView.setMessage(message1, size1, message2);
        window.repaintBuffer();
    });

    public function hideMessage() = window.sync({
        messagesView.setMessage(null, 0, null);
        window.repaintBuffer();
    });
    
    // Animates a smooth snake movement. The duration of the animation is specified, in milliseconds.
    public function animateMove(world, delayMs) {
        window.resizeOnDemand(g -> {
            fieldView.windowResized();
            snakeView.windowResized();
            drawWorld(g, world);
        });

        var frameEndTime = System.currentTimeMillis() + delayMs;
        
        if (world.snakeHeadMoved() || world.snakeTailMoved()) {
            // Snake is moving. Animate it.
            animateMoveInternal(world, delayMs);            
        } else {
            // No snake movement - paint only one frame.
            paintFrame(world, 1.0, true);
        }
        
        // Wait in order to not return the control earlier than was requested.
        var currentTime = System.currentTimeMillis();
        if (currentTime < frameEndTime) Thread.sleep(frameEndTime - currentTime);
    }
    
    function animateMoveInternal(world, delayMs) {
        // Calculate the number of frames to be shown.
        var cellSize = fieldView.getCellSize();
        var pixels = (int)Math.max(cellSize.x, cellSize.y);
        var frames = (MAX_FRAMES_PER_S * delayMs + 999) / 1000;
        var steps = Math.min(pixels, frames);
        
        // Paint the first frame.
        var startTime = System.currentTimeMillis();
        paintFrame(world, 0.0, true);
        
        // Paint the other frames.
        for (var s = 1; s < steps; ++s) {
            var frameTime = (long)(startTime + (double)s * delayMs / steps);
            var currentTime = System.currentTimeMillis();
            if (currentTime < frameTime) {
                Thread.sleep(frameTime - currentTime);
                paintFrame(world, (double)s / steps, false);
            }
        }
    }
    
    // Paints one snake movement frame.
    function paintFrame(world, shift, firstFrame) = window.sync({
        // Update the off-screen image.
        window.withImageGraphics(g -> drawWorldUpdate(g, world, shift, firstFrame));
        
        // Now draw the image to the screen buffer.
        window.repaintBuffer();
    });
    
    // Draws world from scratch.
    function drawWorld(g, world) {
        fieldView.drawField(g, world);
        foodView.drawFood(g, world);
        snakeView.drawSnake(g, world);
    }
    
    // Updates world image.
    // If firstFrame = true, this is the first frame of the current snake movement.
    function drawWorldUpdate(g, world, shift, firstFrame) {
        if (firstFrame) {
            // First frame. Update food (this is not necessary for subsequent frames,
            // since the food cannot change between two frames of the same move).
            foodView.updateFood(g, world);
        }
        
        snakeView.drawSnakeUpdate(g, world, shift, firstFrame);
    }
}

// Maintains a queue of pressed keys.
class View_Keyboard {
    // Keyboard buffer. Contains key codes.
    var keyBuffer = java.util.Collections.synchronizedList(java.util.LinkedList());

    function View_Keyboard() {
        var awtListener = {
            function eventDispatched(e) {
                if (KeyEvent.KEY_PRESSED == e.getID()) keyBuffer.add(e.getKeyCode());
            }
        };
        Toolkit.getDefaultToolkit().addAWTEventListener(awtListener, AWTEvent.KEY_EVENT_MASK);
    }
    
    public function readKey() = keyBuffer.isEmpty() ? -1 : keyBuffer.remove(0);
    
    public function waitKey() {
        keyBuffer.clear();
        for (;;) {
            while (keyBuffer.isEmpty()) Thread.sleep(100);
            var key = keyBuffer.remove(0);
            if (key != KeyEvent.VK_CONTROL
                && key != KeyEvent.VK_SHIFT
                && key != KeyEvent.VK_ALT
                && key != KeyEvent.VK_ALT_GRAPH) return key;
        }
    }
}

// Incapsulates a Java AWT-based window for view rendering.
class View_Window {
    var bufferPaintedListener;

    var canvas;             // java.awt.Canvas
    var image;              // java.awt.image.BufferedImage
    var imageSize;          // Vector2D
    var buffer;             // java.awt.image.BufferStrategy
    
    var lastPaintTime;      // Last time when the display was updated. Used for auto-repaint.
    
    function View_Window(bufferPaintedListener) = sync({
        this.bufferPaintedListener = bufferPaintedListener;
    
        initImageSize();
        initImage();
        initFrame();
        initScreenBuffer();
        initAutoRepaintTimer();
    });
    
    public function getImageSize() = imageSize;
    
    public function sync(block) = SwingUtilities.invokeAndWait(block);
    
    // Calculates an initial image size depending on the size of the screen.
    function initImageSize() {
        var screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        var canvasWidth = (int)(screenSize.getWidth() * 0.8);
        var canvasHeight = (int)(screenSize.getHeight() * 0.8);

        var aspect = (double)WORLD_SIZE.x / WORLD_SIZE.y;
        var canvasWidthAspect = (int)(canvasHeight * aspect);
        var canvasHeightAspect = (int)(canvasWidth / aspect);

        if (canvasHeightAspect > canvasHeight) canvasWidth = canvasWidthAspect;
        if (canvasWidthAspect > canvasWidth) canvasHeight = canvasHeightAspect;
        
        imageSize = Vector2D(canvasWidth, canvasHeight);
    }

    // Calculates actual cell and snake sizes in pixels depending on the current size
    // of the image.
    function initImage() {
        image = BufferedImage(imageSize.x, imageSize.y, BufferedImage.TYPE_INT_RGB);
    }
    
    // Initializes the window.
    function initFrame() {
        // Create the canvas.
        canvas = Canvas();
        canvas.setPreferredSize(Dimension(imageSize.x, imageSize.y));
        canvas.setIgnoreRepaint(true);

        var panel = JPanel(BorderLayout());
        panel.add(canvas, BorderLayout.CENTER);

        // Create the frame.
        var frame = JFrame("Snake");
        frame.setIconImage(createWindowIconImage());
        frame.setContentPane(panel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    // Creates an image used as the icon of the game window.
    function createWindowIconImage() {
        const iconSize = Vector2D(32, 32);
        const iconCellSize = Vector2D(6, 6);
    
        var img = BufferedImage(iconSize.x, iconSize.y, BufferedImage.TYPE_INT_RGB);
        withGraphics(img.createGraphics(), g -> {
            // Background.
            g.setColor(View.COLOR_NONE);
            g.fillRect(0, 0, iconSize.x, iconSize.y);
            
            // Grid.
            g.setColor(View.COLOR_GRID);
            for (var x = iconCellSize.x; x < iconSize.x; x += iconCellSize.x) {
                g.drawLine(x, 0, x, iconSize.y - 1);
            }
            for (var y = iconCellSize.y; y < iconSize.y; y += iconCellSize.y) {
                g.drawLine(0, y, iconCellSize.x - 1, y);
            }
            
            // Snake.
            var pointsXY = [ [ 6, 0 ], [ 1, 0 ], [ 1, 2 ], [ 3, 2 ], [ 3, 4 ], [ -1, 4 ] ];
            var points = extList(pointsXY).map(Vector2D.valueOf);
            
            g.setColor(View.COLOR_SNAKE);
            for (var i = 0; i < points.size() - 1; ++i) {
                winIconLine(g, iconCellSize, points.get(i), points.get(i + 1));
            }
        });
        
        return img;
    }

    function winIconLine(g, csize, p1, p2) {
        var tp1 = p1.min(p2);
        var tp2 = p1.max(p2);
        var pixelPos = tp1.mul(csize).add(1);
        var pixelSize = tp2.sub(tp1).add(1).mul(csize).sub(2);
        g.fillRect(pixelPos.x, pixelPos.y, pixelSize.x, pixelSize.y);
    }
    
    // Initializes screen buffer.
    function initScreenBuffer() {
        canvas.createBufferStrategy(2);
        buffer = canvas.getBufferStrategy();
    }
    
    // Initializes auto-repaint timer task. The purpose is to guarantee that the window
    // will be repainted periodically even when the game is paused. This is necessary,
    // because window image may be lost when, for instance, the window is moved or resized
    // by the user.
    function initAutoRepaintTimer() {
        lastPaintTime = System.currentTimeMillis();
        var timerInterval = (int)(View.AUTO_REPAINT_INTERVAL_MS / 2);
        var timer = javax.swing.Timer(timerInterval, autoRepaintTimerEvent);
        timer.start();
    }
    
    function autoRepaintTimerEvent() {
        var time = System.currentTimeMillis();
        if (time - lastPaintTime >= View.AUTO_REPAINT_INTERVAL_MS) repaintBuffer();
    }
    
    public function resizeOnDemand(lambda) = sync({
        // If the window was resized by the user, size properties must be recalculated,
        // and the world must be painted from scratch.
        var canvasSize = Vector2D(canvas.getWidth(), canvas.getHeight());
        if (!canvasSize.equals(imageSize)) {
            imageSize = canvasSize;
            initImage();
            withImageGraphics(lambda);
        }
    });
    
    // Draws the off-screen image to the screen buffer, and shows it.
    public function repaintBuffer() {
        updateBuffer();
        while (buffer.contentsLost()) {
            updateBuffer();
        }
        lastPaintTime = System.currentTimeMillis();
    }
    
    function updateBuffer() {
        // This loop is necessary according to the BufferStrategy documentation.
        paintInBuffer();
        while (buffer.contentsRestored()) {
            paintInBuffer();
        }
        buffer.show();
    }
    
    // Draws the off-screen to the buffer and draws optional messages above it.
    function paintInBuffer() = withBufferGraphics(g -> {
        // Image.
        var w = image.getWidth();
        var h = image.getHeight();
        var x = (int)((imageSize.x - w) / 2);
        var y = (int)((imageSize.y - h) / 2);
        g.setColor(Color.BLACK);
        if (x > 0) g.fillRect(0, 0, x, imageSize.y);
        if (y > 0) g.fillRect(0, 0, imageSize.x, y);
        if (x + w < imageSize.x) g.fillRect(x + w, 0, imageSize.x - x - w, imageHeight);
        if (y + h < imageSize.y) g.fillRect(0, y + h, imageSize.x, imageHeight - y - h);
        g.drawImage(image, x, y, null);
        
        bufferPaintedListener(g);
    });
    
    public function withImageGraphics(lambda) = withGraphics(image.createGraphics(), lambda);
    function withBufferGraphics(lambda) = withGraphics(buffer.getDrawGraphics(), lambda);
    function withGraphics(g, lambda) = withResource(g, g -> g.dispose(), lambda);
}

// Rendering grid and walls.
class View_Field {
    var window;

    // Cell size in pixels.
    var cellSize;

    function View_Field(window) = window.sync({
        this.window = window;
        windowResized();
    });
    
    public function getCellSize() = cellSize;
    public function cellToPixel(x, y) = Vector2D.valueOf(x, y).mul(cellSize).toInt();
    
    public function windowResized() {
        cellSize = window.getImageSize().toDouble().div(WORLD_SIZE).max(8.0);
    }
    
    public function drawField(g, world) {
        drawBackground(g);
        drawGrid(g);
        drawWalls(g, world);
    }
    
    function drawBackground(g) {
        g.setColor(View.COLOR_NONE);
        View_Utils.fillRect(g, Vector2D(0, 0), window.getImageSize());
    }
    
    // Draws the grid.
    function drawGrid(g) {
        g.setColor(View.COLOR_GRID);
        
        var p1 = cellToPixel(0, 0);
        var p2 = cellToPixel(WORLD_SIZE);
        
        for (var y = 0; y <= WORLD_SIZE.y; ++y) {
            var cy = cellToPixel(0, y).y;
            g.drawLine(p1.x, cy, p2.x, cy);
        }
        
        for (var x = 0; x <= WORLD_SIZE.x; ++x) {
            var cx = cellToPixel(x, 0).x;
            g.drawLine(cx, p1.y, cx, p2.y);
        }
    }
    
    // Draws walls.
    function drawWalls(g, world) {
        for (var pos : Vector2D(0, 0).range2D(WORLD_SIZE)) {
            var cell = world.getCell(pos);
            if (cell == World.CELL_WALL) paintWallCell(g, pos);
        }
    }
    
    // Draws an empty cell (no snake, no wall).
    public function paintNoneCell(g, pos) {
        g.setColor(View.COLOR_NONE);
        var cpos1 = cellToPixel(pos);
        var cpos2 = cellToPixel(pos.add(1));
        View_Utils.fillRect(g, cpos1, cpos2);
        
        g.setColor(View.COLOR_GRID);
        g.drawLine(cpos1.x, cpos1.y, cpos1.x, cpos2.y - 1);
        g.drawLine(cpos1.x, cpos1.y, cpos2.x - 1, cpos1.y);
    }
    
    // Draws a wall cell.
    public function paintWallCell(g, pos) {
        g.setColor(View.COLOR_WALL);
        var cpos1 = cellToPixel(pos);
        var cpos2 = cellToPixel(pos.add(1));
        View_Utils.fillRect(g, cpos1, cpos2);
    }
}

// Renders a snake.
class View_Snake {
    var fieldView;

    // Distance in pixels from the edge of a cell to snake body.
    var snakeCellDist;

    // Information about the previous frame. Used to find what areas of the off-screen image
    // have to be updated.
    var lastHeadMoved = false;
    var lastTailPosValid = false;
    var lastTailStartPos = Vector2D(-1, -1);
    var lastTailEndPos = Vector2D(-1, -1);

    function View_Snake(fieldView) {
        this.fieldView = fieldView;
        windowResized();
    }
    
    public function windowResized() {
        var snakeSize = fieldView.getCellSize().mul(2.0 / 3.0).toInt();
        snakeCellDist = fieldView.getCellSize().sub(snakeSize).div(2).toInt();
    }
    
    // Draws snake.
    public function drawSnake(g, world) {
        lastTailPosValid = false;
        if (world.snakeLen() >= 1) {
            if (world.snakeLen() == 1) {
                drawSnakeElement(g, world, 0, 0, 1.0);
            } else {
                for (var i = 1; i < world.snakeLen(); ++i) {
                    drawSnakeElement(g, world, i - 1, i, 1.0);
                }
            }
        }
    }
    
    public function drawSnakeUpdate(g, world, shift, firstFrame) {
        if (firstFrame) {
            invalidateSnake(g, world);
        }
    
        // Snake.
        if (world.snakeLen() >= 1) {
            // Head.
            if (world.snakeLen() > 1 && world.snakeHeadMoved()) {
                drawSnakeElement(g, world, 1, 0, shift);
            }
            
            // Tail.
            if (world.snakeLen() > 1 && world.snakeTailMoved()) {
                updateSnakeTail(g, world, shift, firstFrame);
            }
            
            drawSnakeHeadWall(g, world);
        }
    }
    
    // Erases the snake tail painted in previous frame, and draws the snake head.
    function invalidateSnake(g, world) {
        // Snake head.
        if (world.snakeLen() > 2 && world.snakeHeadMoved()) {
            drawSnakeElement(g, world, 1, 2, 1.0);
        }
        
        // Snake tail.
        if (lastTailPosValid) {
            fieldView.paintNoneCell(g, lastTailStartPos);
            fieldView.paintNoneCell(g, lastTailEndPos);
            
            if (world.snakeLen() > 1) {
                drawSnakeElement(g, world, world.snakeLen() - 2, world.snakeLen() - 1, 1.0);
            } else if (world.snakeLen() == 1) {
                drawSnakeElement(g, world, world.snakeLen() - 1, world.snakeLen() - 1, 1.0);
            }
        }
            
        lastHeadMoved = world.snakeHeadMoved();
        lastTailPosValid = false;
    }
    
    function updateSnakeTail(g, world, shift, firstFrame) {
        var tailStartPos = world.snakeCell(world.snakeLen() - 1);
        var tailEndPos = world.snakeCell(world.snakeLen());

        fieldView.paintNoneCell(g, tailStartPos);
        fieldView.paintNoneCell(g, tailEndPos);
        drawSnakeElement(g, world, world.snakeLen() - 1, world.snakeLen(), 1.0 - shift);
        if (world.snakeLen() > 2) {
            drawSnakeElement(g, world, world.snakeLen() - 2, world.snakeLen() - 1, 1.0);
        }

        //if (firstFrame) {
            lastTailStartPos = tailStartPos;
            lastTailEndPos = tailEndPos;
            lastTailPosValid = true;
        //}
    }
    
    // Draws the wall located above the snake's head. This is necessary when the snake
    // collides with a wall.
    function drawSnakeHeadWall(g, world) {
        // Wall above snake's head.
        var headPos = world.snakeCell(0);
        if (world.getCell(headPos) == World.CELL_WALL) fieldView.paintWallCell(g, headPos);
    }
    
    // Draws snake body element.
    function drawSnakeElement(g, world, index1, index2, shift) {
        if (shift == 0.0) return;
    
        var pos1 = world.snakeCell(index1);
        var pos2 = world.snakeCell(index2);
        var cpos1 = fieldView.cellToPixel(pos1);
        var cpos2 = fieldView.cellToPixel(pos2);
        
        if (shift < 1.0) {
            cpos2 = cpos2.sub(cpos1).mul(shift).toInt().add(cpos1);
        }

        g.setColor(View.COLOR_SNAKE);
        drawSnakeElementRectangle(g, cpos1, cpos2);
    }
    
    function drawSnakeElementRectangle(g, s1, s2) {
        var p1 = s1.min(s2).add(snakeCellDist).toInt();
        var p2 = s1.max(s2).add(fieldView.getCellSize()).sub(snakeCellDist).add(1).toInt();
        View_Utils.fillRect(g, p1, p2);
    }
}

// Renreds a food.
class View_Food {
    var fieldView;

    var lastFoodWeight = 0;
    var lastFoodPos = Vector2D(-1, -1);
    
    function View_Food(fieldView) {
        this.fieldView = fieldView;
    }
    
    // Draws the food.
    public function drawFood(g, world) {
        if (world.foodWeight() > 0) {
            var foodPos = world.foodPos();
            var cpos = fieldView.cellToPixel(foodPos);
            var csize = fieldView.cellToPixel(foodPos.add(FOOD_SIZE)).sub(cpos).sub(1);

            View_Utils.drawWithHighQuality(g, {
                drawFoodCircle(g, cpos, csize);
                drawFoodWeight(g, world, cpos, csize);
            });
        }
    }

    // Updates food image.
    public function updateFood(g, world) {
        if (world.foodWeight() != lastFoodWeight || !world.foodPos().equals(lastFoodPos)) {
            if (lastFoodWeight != 0) {
                world.foodCells(lastFoodPos).foreach(p -> fieldView.paintNoneCell(g, p));
            }
            
            drawFood(g, world);
            
            lastFoodWeight = world.foodWeight();
            lastFoodPos = world.foodPos();
        }
    }
    
    function drawFoodCircle(g, cpos, csize) {
        var oldStroke = g.getStroke();
        g.setStroke(BasicStroke(3));
        g.setColor(Color.RED.darker());
        g.fillOval(cpos.x + 1, cpos.y + 1, csize.x - 2, csize.y - 2);
        g.setColor(Color.PINK);
        g.drawOval(cpos.x + 1, cpos.y + 1, csize.x - 2, csize.y - 2);
        g.setStroke(oldStroke);
    }
    
    function drawFoodWeight(g, world, cpos, csize) {
        var s = world.foodWeight() + "";
        
        var font = getAppropriateFont(g, s, (int)(csize.x * 3 / 4), (int)(csize.y * 3 / 4));
        g.setFont(font);
        var fm = g.getFontMetrics();
        var sw = fm.stringWidth(s);
        var sx = cpos.x + ((csize.x - sw) / 2);
        var sy = cpos.y + ((csize.y + fm.getAscent() - fm.getDescent()) / 2);
        
        g.setColor(Color.PINK);
        g.drawString(s, sx, sy);
    }
    
    // Finds out the appropriate font size to make a string occupy the specified
    // rectangle.
    function getAppropriateFont(g, s, w, h) {
        var fontsize = 6;
        var font = Font("Dialog", Font.BOLD, fontsize);
        var resfont = font;
        for (;;) {
            g.setFont(font);
            var fm = g.getFontMetrics();
            var sw = fm.stringWidth(s);
            var sh = fm.getAscent() + fm.getDescent();
            if (sw >= w || sh >= h) return resfont;
            resfont = font;
            ++fontsize;
            font = Font("Dialog", Font.BOLD, fontsize);
        }
    }
}

// Renders messages.
class View_Messages {
    var message1;
    var messageSize1;
    var message2;

    function View_Messages() {    
        message1 = null;
        messageSize1 = 0;
        message2 = null;
    }
    
    public function setMessage(message1, size1, message2) {
        this.message1 = message1;
        this.messageSize1 = size1;
        this.message2 = message2;
    }
    
    public function draw(g, imageSize) {
        if (message1 == null) return;
    
        View_Utils.drawWithHighQuality(g, {
            var ybottom = drawMessage1(g, imageSize);
            if (message2 != null) drawMessage2(g, imageSize, ybottom);
        });
    }
    
    // Draws the main pop-up message.
    function drawMessage1(g, imageSize) {
        var font = Font("Monospaced", Font.BOLD, messageSize1);
        var textTl = java.awt.font.TextLayout(message1, font, g.getFontRenderContext());
        var outline = textTl.getOutline(null);
        var outlineBounds = outline.getBounds();
        
        var x = (imageSize.x - outlineBounds.width) / 2;
        var y = (imageSize.y + outlineBounds.height) / 2;
        
        g.translate(x, y);
        g.setColor(Color.BLUE);
        g.fill(outline);
        
        var oldStroke = g.getStroke();
        g.setColor(Color.WHITE);
        g.setStroke(BasicStroke((int)Math.max(1, (int)(messageSize1 / 30))));
        g.draw(outline);
        g.setStroke(oldStroke);
        g.translate(-x, -y);

        return y + outlineBounds.height / 2;
    }
    
    function drawMessage2(g, imageSize, ypos) {
        var font = Font("Monospaced", Font.BOLD, 30);
        g.setFont(font);
        var fm = g.getFontMetrics();
        
        var stringWidth = fm.stringWidth(message2);
        var x = (int)((imageSize.x - stringWidth) / 2);
        var y = ypos + 10 + fm.getAscent();
        
        g.setColor(Color(0, 0, 0, 0x60));
        g.fillRect(x - 10, y - fm.getAscent() - 5, stringWidth + 20, fm.getHeight() + 10);
        g.setColor(Color.WHITE);
        g.drawString(message2, x, y);
    }
}

// Utility functions.
class View_Utils {
    // Configures the Graphics to use high quality rendering and invokes the specified block.
    // Then restores original Graphics settings.
    public const drawWithHighQuality = (g, block) -> {
        var oldRenderingValue = g.getRenderingHint(RenderingHints.KEY_RENDERING);
        var oldAntialiasingValue = g.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
        var oldTextAntialiasing = g.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);
        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB);

        block();
        
        g.setRenderingHint(RenderingHints.KEY_RENDERING, oldRenderingValue);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, oldAntialiasingValue);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, oldTextAntialiasing);
    };
    
    public const fillRect = (g, p1, p2) -> g.fillRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);
}
