/*
 * Copyright 2013 Anton Karmanov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// World. Responsible for game physics.
// -------------------------------------------------------------------------------------------------

// A world is a combination of a map, a snake and a food.
class World {
    // Types of cells.
    public const CELL_NONE = 0;
    public const CELL_WALL = 1;
    public const CELL_SNAKE = 2;
    public const CELL_FOOD = 3;

    // Snake movement directions.
    public const DIR_UP = Vector2D(0, -1);
    public const DIR_DOWN = Vector2D(0, 1);
    public const DIR_LEFT = Vector2D(-1, 0);
    public const DIR_RIGHT = Vector2D(1, 0);

    // Current level number.
    var level;

    var mapState;
    var foodState;
    var snakeState;

    function World(level, levelMap) {
        this.level = level;

        mapState = World_Map(levelMap);
        foodState = World_FoodState(mapState);

        snakeState = World_SnakeState(
            levelMap.startLocation,
            levelMap.startDirection,
            mapState,
            foodState);
    }

    // Sets snake direction. Returns <true> on success, <false> otherwise.
    public function setSnakeDirection(dir) = snakeState.setDirection(dir);

    // Single move of a snake. Moves the snake by one cell, and creates a new food if the current
    // one has been eaten.
    public function move() {
        if (snakeState.move()) {
            foodState.foodEaten();
        }
    }

    public function getCell(pos) = mapState.getCell(pos);

    public function foodPos() = foodState.getFoodPos();
    public function foodWeight() = foodState.getFoodWeight();
    public function foodCells(pos) = foodState.foodCells(pos);

    public function snakeLen() = snakeState.snakeLen();
    public function snakeCell(ofs) = snakeState.snakeCell(ofs);
    public function snakeHeadMoved() = snakeState.isHeadMoved();
    public function snakeTailMoved() = snakeState.isTailMoved();

    public function gameOver() = snakeState.isCrashed();
    public function levelFinished() = !foodState.hasMoreFood();
}

// Map of a world.
class World_Map {
    var cells;

    function World_Map(levelMap) {
        cells = new [WORLD_SIZE.y][WORLD_SIZE.x];
        for (var pos : Vector2D(0, 0).range2D(WORLD_SIZE)) {
            var cell = levelMap.wallMatrix[pos.y][pos.x] ? World.CELL_WALL : World.CELL_NONE;
            setCell(pos, cell);
        }
    }

    public function getCell(pos) = cells[pos.y][pos.x];
    public function setCell(pos, cell) = cells[pos.y][pos.x] = cell;
}

// Maintains the state of a food.
class World_FoodState {
    var mapState;
    var foodPos;
    var foodWeight = 0;
    var foodRnd = java.util.Random();

    function World_FoodState(mapState) {
        this.mapState = mapState;
        createFood(1);
    }

    public function getFoodPos() = foodPos;
    public function getFoodWeight() = foodWeight;
    public function hasMoreFood() = foodWeight > 0;

    // Removes the current food and creates a new one, with an increased weight.
    public function foodEaten() {
        removeFood();

        var nextWeight = foodWeight + 1;
        foodWeight = 0;
        if (nextWeight <= MAX_FOOD) createFood(nextWeight);
    }

    // Returns a list of positions of cells occupied by the food.
    public function foodCells(basePos) = extList(basePos.range2D(basePos.add(FOOD_SIZE)));

    // Creates a food at a random position.
    function createFood(weight) {
        for (var i = 0; i < 100; ++i) {
            var pos = randomFoodPos();
            if (!foodCells(pos).exists(p -> mapState.getCell(p) != World.CELL_NONE)) {
                foodCells(pos).foreach(p -> mapState.setCell(p, World.CELL_FOOD));
                foodWeight = weight;
                foodPos = pos;
                break;
            }
        }
    }

    function randomFoodPos() {
        var y = foodRnd.nextInt(WORLD_SIZE.y - 1);
        var x = foodRnd.nextInt(WORLD_SIZE.x - 1);
        return Vector2D(x, y);
    }

    // Removes the current food from the world.
    function removeFood() =
        foodCells(foodPos)
            .filter(p -> mapState.getCell(p) == World.CELL_FOOD)
            .foreach(p -> mapState.setCell(p, World.CELL_NONE));
}

// State of a snake. Maintains a list of cells occupied by the snake.
class World_SnakeState {
    const DIRECTIONS = [ World.DIR_UP, World.DIR_DOWN, World.DIR_LEFT, World.DIR_RIGHT ];

    var mapState;
    var foodState;

    var snakeCells = World_SnakeCells();        // Queue of cells occupied by the snake.
    var snakeDir = Vector2D(0, 0);              // Current snake head direction.
    var snakeCapacity = MIN_SNAKE_LEN;          // The length which the snake has to grow to.

    // <true> if the snake's head/tail has moved during the last move() call.
    var headMoved = false;
    var tailMoved = false;

    // <true> if the snake has collided with a wall.
    var crashed = false;

    function World_SnakeState(location, direction, mapState, foodState) {
        this.mapState = mapState;
        this.foodState = foodState;

        setDirection(direction);
        snakeCells.add(location);
        mapState.setCell(location, World.CELL_SNAKE);
    }

    public function snakeLen() = snakeCells.size();
    public function snakeCell(ofs) = snakeCells.get(ofs);
    public function isHeadMoved() = headMoved;
    public function isTailMoved() = tailMoved;
    public function isCrashed() = crashed;

    public function setDirection(dir) {
        assert(extList(DIRECTIONS).exists(p -> p.equals(dir)));
        if (snakeDir.equals(dir) || snakeDir.neg().equals(dir)) return false;
        snakeDir = dir;
        return true;
    }

    public function move() {
        headMoved = false;
        tailMoved = false;
        var foodEaten = false;

        if (snakeCells.size() <= snakeCapacity) {
            // The snake is not too long, so its head can move.
            foodEaten = moveSnakeHead();
        }

        if (!crashed && snakeCells.size() > snakeCapacity) {
            // The snake is not too short, so the tail can move.
            moveSnakeTail();
        }

        return !crashed && foodEaten;
    }

    // Moves the snake head to an adjacent cell.
    function moveSnakeHead() {
        var oldHeadPos = snakeCells.get(0);
        var headPos = oldHeadPos.add(snakeDir);
        snakeCells.add(headPos);
        headMoved = true;

        var foodEaten = occupyCell(headPos);
        return foodEaten;
    }

    function occupyCell(headPos) {
        var cell = mapState.getCell(headPos);

        if (cell != World.CELL_WALL) {
            mapState.setCell(headPos, World.CELL_SNAKE);
        }

        var foodEaten = false;

        if (cell == World.CELL_FOOD) {
            var capacityGain = (int)(FOOD_LENGTH * foodState.getFoodWeight());
            snakeCapacity = Math.min(MAX_SNAKE_LEN, snakeCapacity + capacityGain);
            foodEaten = true;
        } else if (cell != World.CELL_NONE) {
            // Collision with a wall.
            crashed = true;
        }

        return foodEaten;
    }

    // Moves the snake tail.
    function moveSnakeTail() {
        var tailPos = snakeCells.remove();
        mapState.setCell(tailPos, World.CELL_NONE);
        tailMoved = true;
    }
}

// A queue of cell positions occupied by a snake. The first element of the queue is the position
// of the head of the snake, the last position is the position of the tail.
class World_SnakeCells {
    var snakePos;           // Ring-array of snake element positions.
    var snakeHeadOfs;       // Offset of the head element in the snakePos array.
    var snakeLen;           // Current number of snake elements.

    function World_SnakeCells() {
        snakePos = new [MAX_SNAKE_LEN + 1];
        for (var i = 0; i < snakePos.length; ++i) snakePos[i] = Vector2D(0, 0);

        snakeHeadOfs = 0;
        snakeLen = 0;
    }

    // Inserts a new head element position.
    public function add(pos) {
        ++snakeLen;
        --snakeHeadOfs;
        if (snakeHeadOfs < 0) snakeHeadOfs = snakePos.length - 1;
        snakePos[snakeHeadOfs] = pos;
    }

    // Removes the tail element.
    public function remove() {
        var result = get(snakeLen - 1);
        --snakeLen;
        return result;
    }

    // Returns the element at the specified offset from the head, so get(0) returns the
    // head element, get(snakeLen - 1) returns the tail element.
    public function get(ofs) {
        var index = (ofs + snakeHeadOfs) % snakePos.length;
        return snakePos[index];
    }

    public function size() = snakeLen;
}
