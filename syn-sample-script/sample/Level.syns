/*
 * Copyright 2013 Anton Karmanov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Level generator. Generates random level maps.
// -------------------------------------------------------------------------------------------------

import java.util.*;

// Random numbers generator used for level generation.
const LEVEL_RANDOM_NUMBER_GENERATOR = Random();

// Level map returned by this module. Contains wall cells matrix, snake start position and direction.
class LevelMap {
    public var wallMatrix;      // boolean[][]: wallMatrix[y][x] == true if the cell (x, y) is a wall.
    public var startLocation;   // Vector2D.
    public var startDirection;  // Vector2D: x, y = -1, 0 or 1, denoting position change on each step.
    
    function LevelMap(wallMatrix, startLocation, startDirection) {
        this.wallMatrix = wallMatrix;
        this.startLocation = startLocation;
        this.startDirection = startDirection;
    }
}

// Generates a random level map.
// Returns a LevelMap object.
function generateLevelMap(mapSize, blockSize, level) =
    Level_MapGenerator(mapSize, blockSize, level).generate();

// Implementation details.
// -------------------------------------------------------------------------------------------------

class Level_MapGenerator {
    const WALL_RIGHT = Vector2D(1, 0);
    const WALL_DOWN = Vector2D(0, 1);

    var mapSize;
    var blockSize;
    var level;
    var field;

    function Level_MapGenerator(mapSize, blockSize, level) {
        this.mapSize = mapSize;
        this.blockSize = blockSize;
        this.level = level;
        field = Level_Field(mapSize);
    }
    
    public function generate() {
        generateRandomField();
        var wallMatrix = fillWallMatrix();
        var startPos = calculateStartPosition();
        var startLocation = startPos.location.mul(blockSize).add(blockSize.div(2, 2));
        return LevelMap(wallMatrix, startLocation, startPos.direction);
    }
    
    function generateRandomField() {
        generateBorderWalls();
        generateInnerWalls();
    }
    
    function generateBorderWalls() {
        generateBorderWall(point(0, 0), WALL_RIGHT);
        generateBorderWall(point(0, mapSize.y), WALL_RIGHT);
        generateBorderWall(point(0, 0), WALL_DOWN);
        generateBorderWall(point(mapSize.x, 0), WALL_DOWN);
    }
    
    function generateBorderWall(startPoint, direction) {
        var endPoint = mapSize.add(direction.reverse());
        for (var currentPoint : startPoint.range(endPoint, direction)) field.addLink(currentPoint, direction);
    }
    
    function generateInnerWalls() {
        var mirror = chooseRandomMirror();
        
        var wallCountGoal = level + 4;
        while (calculateCurrentWallCount() < wallCountGoal) {
            if (!generateWall(mirror)) break;
        }
    }
    
    function chooseRandomMirror() {
        var mirrors = Level_MirrorGenerator(mapSize).createMirrors();
        return mirrors[LEVEL_RANDOM_NUMBER_GENERATOR.nextInt(mirrors.length)];
    }

    // If two parallel walls overlap, they are counted as a single wall.
    function calculateCurrentWallCount() {
        var count = 0;
        for (var pos : point(1, 1).range2D(mapSize)) {
            if (field.isLink(pos, WALL_RIGHT) && !field.isLink(pos.add(-1, 0), WALL_RIGHT)) ++count;
            if (field.isLink(pos, WALL_DOWN) && !field.isLink(pos.add(0, -1), WALL_DOWN)) ++count;
        }
        return count;
    }
    
    // Returns true if a wall was generated, and false if there is no space for a wall.
    function generateWall(mirror) {
        var walls = generateAllPossibleWalls(mirror);
        if (walls.isEmpty()) return false;
        
        var wall = selectRandomWall(walls);
        buildWall(mirror, wall);
        return true;
    }
    
    function generateAllPossibleWalls(mirror) {
        var walls = ArrayList();
        for (var pos : point(0, 0).range2D(mirror.getSize().add(1))) {
            generateWallsForDirection(mirror, pos, WALL_RIGHT, walls);
            generateWallsForDirection(mirror, pos, WALL_DOWN, walls);
        }
        return walls;
    }

    // Lists all possible walls that can be built at the given point and direction.
    // All the returned walls are located at the same point, but have different lengths.
    function generateWallsForDirection(mirror, pos, dir, walls) {
    
        // If the specified origin node is linked to another node, no wall can be generated.
        if (field.isLink(pos, dir)) return;
        if (field.isLink(pos.sub(dir), dir)) return;
        
        // Generate walls, increasing the length one by one, while possible.
        var endPos = mirror.getSize().add(1).sub(dir);
        for (var tpos : pos.range(endPos, dir)) {
            var len = tpos.sub(pos).sum() + 1;
            var wall = generateWallForPosition(mirror, pos, dir, len);
            if (wall == null || field.isLink(tpos.add(dir), dir)) break;
            walls.add(wall);
        }
    }
    
    function generateWallForPosition(mirror, pos, dir, len) {
        var priority = getWallPriority(pos, dir, len);
        var wall = Level_Wall(pos, dir, len, priority);
        return isWallLoopIncludingReflections(mirror, wall) ? null : wall;
    }

    function isWallLoopIncludingReflections(mirror, wall) {
        var componentDisjointSet = field.getComponentDisjointSetCopy();
        for (var curWall : mirror.allReflections(wall)) {
            if (isWallLoop(curWall, componentDisjointSet)) return true;
        }
        return false;
    }

    // Checks if a single walls forms a loop.
    function isWallLoop(wall, componentDisjointSet) {
        for (var i = 0; i < wall.length; ++i) {
            var pos = wall.location.add(wall.direction.mul(i));
            var node1 = field.nodeAt(pos);
            var node2 = field.nodeAt(pos.add(wall.direction));
            
            var set1 = componentDisjointSet.findSet(node1.getDisjointSetKey());
            var set2 = componentDisjointSet.findSet(node2.getDisjointSetKey());
            if (set1 == set2) return true;
            
            componentDisjointSet.union(node1.getDisjointSetKey(), node2.getDisjointSetKey());
        }
        
        return false;
    }

    // Calculates the priority of a wall. The priority depends on the length of the wall
    // and its location.
    function getWallPriority(pos, dir, len) {
        var centerPos = pos.add(dir.mul(len / 2));
        var fieldCenterPos = mapSize.div(2, 2);
        var centerDistance = centerPos.sub(fieldCenterPos).length();
        var centerScore = Math.max(0, fieldCenterPos.length() - centerDistance);
        
        var maxLen = mapSize.mul(dir).sum() + 1;
        var lenQuotient = Math.min(len, maxLen - len);
        var lenScore = Math.pow(2, Math.min(20, lenQuotient));
        
        return (int)(centerScore + lenScore);
    }

    // The probability of selecting a wall is proportional to the wall's priority.
    function selectRandomWall(walls) {
        var prioritySum = 0;
        for (var wall : walls) prioritySum += wall.priority;

        var r = LEVEL_RANDOM_NUMBER_GENERATOR.nextInt(prioritySum);
        var s = 0;
        
        for (var wall : walls) {
            if (r >= s && r < s + wall.priority) {
                walls.remove(wall);
                return wall;
            }
            s += wall.priority;
        }
        
        return walls[walls.size() - 1];
    }

    // "Builds" the specified wall in the field, including mirror reflections.
    function buildWall(mirror, wall) {
        for (var curWall : mirror.allReflections(wall)) {
            for (var i = 0; i < wall.length; ++i) {
                var pos = curWall.location.add(curWall.direction.mul(i));
                field.addLink(pos, curWall.direction);
            }
        }
    }

    // Calculate a snake start position.
    function calculateStartPosition() {
        var startPosList = ArrayList();
        findAllStartPositions(point(1, 0), startPosList);
        findAllStartPositions(point(0, 1), startPosList);
        return chooseBestStartPosition(startPosList);
    }

    function findAllStartPositions(dir, startPosList) {
        for (var basePos : point(0, 0).range(mapSize, dir.reverse())) {
            var pos = basePos;
            while (pos.isInRectangle(mapSize)) {
                startPosList.add(Level_StartPosition(pos, dir));
                pos = pos.add(dir.mul(calculateEmptySpaceAhead(pos, dir)));
            }
        }
    }
    
    function chooseBestStartPosition(startPosList) {
        var bestPosition = extList(startPosList).reduce((pos1, pos2) -> {
            var score1 = calculateStartPositionScore(pos1);
            var score2 = calculateStartPositionScore(pos2);
            return score1 >= score2 ? pos1 : pos2;
        });
        return bestPosition;
    }

    function calculateStartPositionScore(position) {
        var emptySpaceScore = calculateEmptySpaceAhead(position.location, position.direction);
        
        var centerLocation = mapSize.div(2, 2);
        var centerDistance = position.location.sub(centerLocation).length();
        var centerDistanceScore = Math.max(0, centerLocation.length() - centerDistance);
        
        return emptySpaceScore + centerDistanceScore;
    }
    
    function calculateEmptySpaceAhead(pos, dir) {
        var space = 0;
        for (var tpos : pos.range(mapSize, dir)) {
            ++space;
            if (field.nodeAt(tpos.add(dir)).isLink(dir.reverse())) break;
        }
        return space;
    }
    
    // Fills level map cells according to links defined between field nodes.
    function fillWallMatrix() {
        var gridSize = mapSize.mul(blockSize).add(1);
        
        // Fill all cells with false.
        var map = new [gridSize.y][gridSize.x];
        for (var pos : point(0, 0).range2D(gridSize)) map[pos.y][pos.x] = false;
        
        // Fill cells occupied by walls with true.
        for (var pos : point(0, 0).range2D(gridSize)) {
            fillMapLink(map, pos, WALL_RIGHT);
            fillMapLink(map, pos, WALL_DOWN);
        }
        
        return map;
    }

    // Fills a single nodes link cells.
    function fillMapLink(map, pos, dir) {
        if (field.isLink(pos, dir)) {
            var endMPos = pos.add(1).mul(blockSize).add(dir);
            for (var mpos : pos.mul(blockSize).range(endMPos, dir)) map[mpos.y][mpos.x] = true;
        }
    }
    
    function point(x, y) = Vector2D(x, y);
}

// Map node - a point located in a corner of a map block. Two adjacent nodes can be linked by a wall.
// A map contains closed regions if and only if the undirected graph formed by nodes and walls contains cycles.
// (See the comment in the top of Snake.syns for the explanation what is the difference between "map cell" and "map block".)
class Level_Node {
    var linkDown;              // true if this node (x, y) is linked with the node (x, y+1).
    var linkRight;             // true if this node (x, y) is linked with the node (x+1, y).
    var disjointSetKey;        // A string used to represent this node in a disjoint-set.
    
    function Level_Node(pos) {
        linkDown = false;
        linkRight = false;
        disjointSetKey = "" + pos.x + ":" + pos.y;
    }

    public function getDisjointSetKey() = disjointSetKey;
    
    public function isLink(dir) = dir.x != 0 ? linkRight : linkDown;
    
    public function setLink(dir) {
        if (dir.x != 0) {
            linkRight = true;
        } else {
            linkDown = true;
        }
    }
}

// Field. Contains a 2D array of nodes.
class Level_Field {
    var size;              // (.x, .y - width, height, even numbers, >= 2).
    var nodesTable;        // (size.y+1) by (size.x+1) nodes.

    // Disjoint-set for tracking connected components of the wall graph.
    // (Needed to avoid closed regions.)
    var componentDisjointSet = DisjointSet();
    
    function Level_Field(size) {
        this.size = size;
        
        // Create nodes table.
        nodesTable = new [size.y + 1][size.x + 1];
        for (var pos : Vector2D(0, 0).range2D(size.add(1))) {
            nodesTable[pos.y][pos.x] = Level_Node(pos);
        }
    }

    public function getComponentDisjointSetCopy() = componentDisjointSet.clone();
    
    public function nodeAt(pos) = nodesTable[pos.y][pos.x];
    
    // Checks if there is a link between two adjacent nodes.
    public function isLink(pos, dir) {
        if (pos.x < 0 || pos.y < 0 || pos.x > size.x || pos.y > size.y) return false;
        return nodeAt(pos).isLink(dir);
    }
    
    // Adds a link between two adjacent nodes.
    public function addLink(pos, dir) {
        var node = nodeAt(pos);
        node.setLink(dir);
        var node2 = nodeAt(pos.add(dir));
        componentDisjointSet.union(node.getDisjointSetKey(), node2.getDisjointSetKey());
    }
}

// Wall. Describes one of possible walls that can be built.
class Level_Wall {
    public var location;    // Vector2D.
    public var direction;   // Vector2D: (1, 0) or (0, 1).
    public var length;      // Length.
    public var priority;    // Priority: the probability of choosing a wall is proportional to its priority.
    
    function Level_Wall(location, direction, length, priority) {
        this.location = location;
        this.direction = direction;
        this.length = length;
        this.priority = priority;
    }
    
    public function equals(w) = location.equals(w.location) && direction.equals(w.direction);
}

class Level_StartPosition {
    public var location;
    public var direction;
    
    function Level_StartPosition(location, direction) {
        this.location = location;
        this.direction = direction;
    }
}

// Reflection. Describes how to reflect one part of a field (a half or a quarter)
// into another one of the same size.
class Level_Reflection {
    public var location;
    public var inversion;
    
    function Level_Reflection(location, inversion) {
        this.location = location;
        this.inversion = inversion;
    }
}

// Mirror. Reflects a part of a field into the rest of the field.
class Level_Mirror {
    var mirrorSize;
    var fieldSize;
    var reflections;
    
    function Level_Mirror(fieldSize, mirrorSize, reflections) {
        this.fieldSize = fieldSize;
        this.mirrorSize = mirrorSize;
        this.reflections = reflections;
    }
    
    public function getSize() = mirrorSize;
    
    public function allReflections(wall) {
        var walls = ArrayList();
        walls.add(wall);
        for (var reflection : reflections) reflectWall(reflection, wall, walls);
        return walls;
    }

    function reflectWall(reflection, wall, walls) {
        var newX = reflectWallByAxis(mirrorSize, reflection, wall, 0);
        var newY = reflectWallByAxis(mirrorSize, reflection, wall, 1);
        var newLocation = Vector2D(newX, newY);
        if (!newLocation.isInRectangle(fieldSize)) return;
        
        var newWall = Level_Wall(newLocation, wall.direction, wall.length, wall.priority);
        
        if (extList(walls).exists(w -> w.equals(newWall))) return;
        walls.add(newWall);
    }

    function reflectWallByAxis(mirrorSize, reflection, wall, axis) {
        var reflectionPos = reflection.location.get(axis);
        var wallPos = wall.location.get(axis);
        if (reflection.inversion.get(axis) > 0) {
            return reflectionPos + wallPos;
        } else {
            return reflectionPos + mirrorSize.get(axis) - wallPos - wall.direction.get(axis) * wall.length;
        }
    }
}

class Level_MirrorGenerator {
    var fieldSize;
    
    function Level_MirrorGenerator(fieldSize) {
        this.fieldSize = fieldSize;
    }
    
    public function createMirrors() = [
        createNoneMirror(),
        createVMirror(1),
        createVMirror(-1),
        createHMirror(1),
        createHMirror(-1),
        createHVMirror(1, 1, 1, 1),
        createHVMirror(1, -1, -1, 1),
        createHVMirror(-1, -1, 1, 1),
        createHVMirror(-1, -1, -1, -1),
        createHVMirror(1, -1, -1, -1)
    ];

    // Mock mirror. Does not modify coordinates.
    function createNoneMirror() = Level_Mirror(fieldSize, fieldSize, []);
    
    // Vertical mirror. Mirrors the left half of a field to its right half.
    function createVMirror(my) {
        var mirrorSize = fieldSize.div(2, 1);
        var reflections = [Level_Reflection(mirrorSize.mul(1, 0), point(-1, my))];
        return Level_Mirror(fieldSize, mirrorSize, reflections);
    }

    // Horizontal mirror. Mirrors the top half of a field to its bottom half.
    function createHMirror(mx) {
        var mirrorSize = fieldSize.div(1, 2);
        var reflections = [Level_Reflection(mirrorSize.mul(0, 1), point(mx, -1))];
        return Level_Mirror(fieldSize, mirrorSize, reflections);
    }

    // Vertical and horizontal mirror. Mirrors the top left quarter of a field to all the other quarters.
    function createHVMirror(mx1, my1, mx2, my2) {
        var mirrorSize = fieldSize.div(2, 2);
        
        var reflections = [
            Level_Reflection(mirrorSize.mul(0, 1), point(mx1, my1)),
            Level_Reflection(mirrorSize.mul(1, 0), point(mx2, my2)),
            Level_Reflection(mirrorSize, point(mx1 * mx2, my1 * my2))
        ];
        
        return Level_Mirror(fieldSize, mirrorSize, reflections);
    }
    
    function point(x, y) = Vector2D(x, y);
}
